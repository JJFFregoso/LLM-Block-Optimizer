import torch
import torch.nn as nn
from torch.nn import functional as F
import regex as re
from datetime import datetime

#Training Dataset
with open("random numbers ult.txt", "r", encoding='utf-8') as f:
    text = f.read()

batch_size = 64
block_size = 128
max_iters = 108501
eval_interval= 500
learning_rate = 5e-4
device = "cuda" if torch.cuda.is_available() else "cpu"
print(device)
eval_iters = 100
n_embd = 84
n_layer = 4
n_head = 6
dropout = 0.4
math_compiler = (r"""\d [*+-] \d""")

torch.manual_seed(1337)

def data_changer(string):
  returned = []
  i = 0
  while i < len(string):
    if i < 3:
      returned.append(string[i])
      i += 1
      continue
    elif len(re.findall(math_compiler, string[i-2:i+3])):
      returned.extend(["<|mult_s|>", string[i], "<|mult_e|>"])
      i += 1
    else:
      returned.append(string[i])
      i += 1
  return returned


def reverse_data_changer(string):
  returned = []
  i = 0
  while i < len(string):
    if string[i] == "<|mult_s|>" or string[i] == "<|mult_e|>":
      i += 1
    else:
      returned.append(string[i])
      i += 1
  return "".join(returned)


#using data augmenter that improves math results and accuracy
text = data_changer(text)
chars = sorted(list(set(text)))

stoi = {ch:i for i,ch in enumerate(chars)}
itos = {i:ch for i,ch in enumerate(chars)}
special_tokens = {"<|mult_s|>": 357, "<|mult_e|>": 358, "<|SoS|>": 359, "<|EoS|>": 360}
used_special_tokens = {"<|mult_s|>": 57, "<|mult_e|>": 58}
vocab_size = len(chars)


encode = lambda s: [stoi[c] for c in s]
decode = lambda l: [itos[i] for i in l]


#loading data
data = torch.tensor(encode(text), dtype=torch.long)
n = int(0.9*len(data))

train_data = data[:n]
val_data = data[n:]

def get_batch(split):
  data = train_data if split == "train" else val_data
  ix = torch.randint(len(data) - block_size, (batch_size,))
  x = torch.stack([data[i:i+block_size] for i in ix])
  y = torch.stack([data[i+1:i+block_size+1] for i in ix])
  x, y = x.to(device), y.to(device)
  return x, y

@torch.no_grad()
def estimate_loss():
    out = {}
    model.eval()
    for split in ["train", "val"]:
        losses = torch.zeros(eval_iters)
        for k in range(eval_iters):
            X, Y = get_batch(split)
            logits, loss = model(X, Y)
            losses[k] = loss.item()
        out[split] = losses.mean()
    model.train()
    return out

class Head(nn.Module):
    """ one head self attention"""
    def __init__(self, head_size):
        super().__init__()
        self.key = nn.Linear(n_embd, head_size, bias=False)
        self.query = nn.Linear(n_embd, head_size, bias=False)
        self.value = nn.Linear(n_embd, head_size, bias=False)
        self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))
        self.dropout = nn.Dropout(dropout)
    def forward(self, x):
        B, T, C = x.shape
        k = self.key(x)
        q = self.query(x)
        v = self.value(x)
        wei = q @ k.transpose(-2, -1) * C**-0.5
        wei = wei.masked_fill(self.tril[:T, :T] == 0, float('-inf'))
        wei = F.softmax(wei, dim=-1)
        wei = self.dropout(wei)
        out = wei @ v
        return out


class MultiHeadAttention(nn.Module):
    def __init__(self, num_heads, head_size):
        super().__init__()
        self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])
        self.proj = nn.Linear(num_heads*head_size, n_embd)
        self.dropout = nn.Dropout(dropout)
    def forward(self, x):
        out = torch.cat([h(x) for h in self.heads], dim=-1)
        out = self.dropout(self.proj(out))
        return out

class FeedForward(nn.Module):
    def __init__(self, n_embd):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(n_embd, 4 * n_embd),
            nn.ReLU(),
            nn.Linear(4* n_embd, n_embd),
            nn.Dropout(dropout)
        )

    def forward(self, x):
        return self.net(x)


#######
class Memory(nn.Module):
  def __init__(self, head_size):
    super().__init__()
    self.pro = nn.Linear(n_embd, head_size, bias=False, dtype=torch.float)
    self.protwo = nn.Linear(n_embd, head_size, bias=False, dtype=torch.float)
    self.profour = nn.Linear(n_embd, head_size, bias=False, dtype=torch.float)
    self.think = nn.Parameter(torch.rand((batch_size, block_size, block_size), dtype=torch.float))
    self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))
    self.dropout = nn.Dropout(dropout)

  def forward(self, x):
     B, T, C = x.shape
     pro = self.pro(x)
     protwo = self.protwo(x)
     profour = self.profour(x)
     mat = pro @ protwo.transpose(-2, -1) * C ** -0.5
     mat = mat + self.think[:B, :T, :T]
     mat = mat.masked_fill(self.tril[:T, :T] == 0, float('-inf'))
     mat = F.softmax(mat, dim=-1)
     out = self.dropout(mat)
     out = out @ profour
     return out

class MemMultiHeadAttention(nn.Module):
      def __init__(self, num_heads, head_size):
          super().__init__()
          self.heads = nn.ModuleList([Memory(head_size) for _ in range(num_heads)])
          self.proj = nn.Linear(num_heads * head_size, n_embd)
          self.dropout = nn.Dropout(dropout)

      def forward(self, x):
          out = torch.cat([h(x) for h in self.heads], dim=-1)
          out = self.dropout(self.proj(out))
          return out

class Block(nn.Module):
    def __init__(self, n_embd, n_head):
        super().__init__()
        head_size = n_embd // n_head
        self.ma = MemMultiHeadAttention(n_head, head_size)
        self.sa = MultiHeadAttention(n_head, n_embd)
        self.ffwd = FeedForward(n_embd)
        self.ln1 = nn.LayerNorm(n_embd)
        self.ln2 = nn.LayerNorm(n_embd)
        self.ln3 = nn.LayerNorm(n_embd)
        self.ln4 = nn.LayerNorm(n_embd)

    def forward(self, x):
        x = x + self.sa(self.ln1(x))
        x = x + self.ffwd(self.ln2(x))
        x = x + self.ma(self.ln3(x))
        x = x + self.ffwd(self.ln4(x))
        return x


class BigramLanguageModel(nn.Module):

  def __init__(self):
    super().__init__()
    self.token_embedding_table = nn.Embedding(vocab_size, n_embd)
    self.position_embedding_table = nn.Embedding(block_size, n_embd)
    self.blocks = nn.Sequential(*[Block(n_embd, n_head=n_head) for _ in range(n_layer)])
    self.ln_f = nn.LayerNorm(n_embd)
    self.lm_head = nn.Linear(n_embd, vocab_size)
  def forward(self, idx, targets=None):
    B, T = idx.shape
    tok_emb = self.token_embedding_table(idx)
    pos_emb = self.position_embedding_table(torch.arange(T, device=device))
    x = tok_emb + pos_emb
    x = self.blocks(x)
    x = self.ln_f(x)
    logits = self.lm_head(x)
    if targets is None:
      loss = None
    else:
      B, T, C = logits.shape
      logits= logits.view(B*T, C)
      targets = targets.view(B*T)
      loss = F.cross_entropy(logits, targets)
    return logits, loss

  def generate(self, idx, max_new_tokens):
    for _ in range(max_new_tokens):
        idx_cond = idx[:, -block_size:]
        logits, loss = self(idx_cond)
        logits = logits[:, -1, :]
        probs = F.softmax(logits, dim=-1)
        idx_next = torch.multinomial(probs, num_samples=1)
        idx = torch.cat((idx, idx_next), dim=1)
    return idx
model = BigramLanguageModel()
m = model.to(device)
optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)
